/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOBKGANGLE
#define ROOBKGANGLE

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

#include "Efficiency.h"
#include "TransAngles.h"

class RooBkgAngle : public RooAbsPdf {
public:

//    RooBkgAngle() {
//    };
    RooBkgAngle(const char *name, const char *title,
            RooRealVar &cpsi, RooRealVar &ctheta, RooRealVar &phi,
            RooRealVar& B1, RooRealVar& _B2, RooRealVar& _B3,
            RooRealVar& B4, RooRealVar& _B5, RooRealVar& _B6,
            Efficiency *efficiency = 0, Bool_t fit = kFALSE);
    RooBkgAngle(const RooBkgAngle& other, const char* name = 0);

    virtual TObject* clone(const char* newname) const {
        return new RooBkgAngle(*this, newname);
    }

    inline virtual ~RooBkgAngle() {
    }

    Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const;
    Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const;

    Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, Bool_t staticInitOK = kTRUE) const;

    void initGenerator(Int_t code) {
    }; // optional pre-generation initialization
    void generateEvent(Int_t code);

protected:

    TransAngles _angles;
    RooRealProxy _B1;
    RooRealProxy _B2;
    RooRealProxy _B3;
    RooRealProxy _B4;
    RooRealProxy _B5;
    RooRealProxy _B6;

    Double_t evaluate() const;

    Bool_t _fit;
    Efficiency *_efficiency;

private:

    ClassDef(RooBkgAngle, 1) // Your description goes here...
};

#endif
